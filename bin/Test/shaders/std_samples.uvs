/*
 *
 *  1.UVS 测试用的样本代码，没有实际执行功能
 *  2.只是为了测试解析器是否正常工作，这个代码里应该包含了大部分典型语法用法。
 *  3.不要对已有代码做出修改，新的测试语法以独立的形式增加
 *  4.每个测试部分需要有测试样本的功能的注释说明
 *  5.语法必须保证正确，语法错误报告的测试在另外的样本中提供
 *  6.std_samples[output_ref].txt 是解析后再输出的参考文件
 *
 */
 
 # define MACRO_TEST
 # define MACRO_NEST
 # define PI 3.1415926
 # define PI2 PI * 2
 
 # ifdef MACRO_TEST
 float fUsingThisOne;	// 有效
 # else
 float fNeverForUsing;
 # endif
 
#ifdef MACRO_TEST
float macro_test_1;		// 有效
#	ifdef MACRO_NEST
float macro_test_2;		// 有效
#	else
float macro_test_3;
float macro_test_4;
#	endif
float macro_test_5;		// 有效
#else
float macro_test_6;
#	ifdef MACRO_NEST
float macro_test_7;
#	else
float macro_test_8;
#	endif
float macro_test_9;
#endif

// 测试ifndef
#ifndef MACRO_TEST_NOTDEFINE
float macro_test_notdefine1; // 有效
#else
float macro_test_notdefine2; // 无效
#endif

#ifdef MACRO_TEST
float macro_test_10;
#endif

#ifndef MACRO_TEST
float macro_test_11;
#endif

#define ADD(a,b) a+b
#define MUL(a,b) a*b

// 全局变量
float3 sun;
float3 dir : VIEWDIRECTION, diffuse : DIFFUSE;
float aa = 0, bb = 1 + 2, cc = 5 + 4 * 5, dd = sin(3.14);
float4 colors[8];
float4 many[8][7];
float4 many3[8][7][16];

#if 0
string pp_test_0;
#endif

#if 1
string pp_test_1;
#endif

#if 1 + 7 / 3 * 4 > 10
string pp_test_2;
#else
string pp_test_3;
#endif

/*#if defined(MACRO_TEST) && ! defined(DISABLE_MACRO)
string pp_test_4;
#else
string pp_test_5_;
#endif*/
 
// 函数测试部分
float func()
{
  int a = 0;
  int b = 1;
  int c = 2;
  ;
  c = c + a * b;
  a = c * a + b / 2;
  return a;
}

float func2(float a)
{
  float x = PI2;
  float y = ADD(23,345) + MUL(23,65);
  float z=ADD(MUL(4,0.1),MUL(7,0.9));
  return a + 1.0f * PI;
}

void func3(float a, float b)
{
  float c = a + b;
}

void func4()
{
  int a = 0, b = 1, c = 2, d = 3, e = 4, f = 5;
  a = 3;
  b = 4;
  d = 4;
  {
    a = a + 1;
	b *= 6;
  }
  {
    c = 7;
	f *= 1;
	{
	  d /= 2;
	  e = 5;
	}
  }
  {
    a = 0;
	b = 1;
  }
}

void func5()
{
  struct CONTEXT {
    float3 pos;	
	float3 dir;
	;
	float2 texcoord;
  };
  
  CONTEXT c;
  
  c.pos = float3(0);
  c.dir = float3(1.0);
}

//////////////////////////////////////////////////////////////////////////

void flow_test()
{
  for(;;); // 无限空循环
  for(int i = 0;;i++);
  for(int i = 0;i<100;i++);

  int k = 0;
  for(;;k++);
}//*/

void flow_test2()
{
  int count = 0;
  
  // 标准循环
  for(int i = 0; i < 10; i++)
    count += i;

  for(int i = 0; i < 10; i++) {
    count += i;
  }
  count = 0;

  for(int i = 0; i < 10; i++) {
    count += i;
    count *= lerp(0, 1, i * 0.1f);
  }
  count = 0;
  // 嵌套循环
  for(int y = -10; y <= 10; y++)
    for(int x = -10; x <= 10; x++)
      count += y * 21 + x;

  for(int y = -10; y <= 10; y++)
    for(int x = -10; x <= 10; x++) {
      count += y * 23 + x;
    }

  for(int y = -10; y <= 10; y++) {
    for(int x = -10; x <= 10; x++) {
      count += y * 25 + x;
    }
  }
  count = 0;
  for(int z = -5; z <= 5; z++)
    for(int y = -5; y <= 5; y++)
      for(int x = -5; x <= 5; x++)
        count += z + y + x;

}

//////////////////////////////////////////////////////////////////////////

void test_flow_if()
{
  int a = 0, b = 1, c = 2, d = 3, e = 4, f = 5;
  if(a > b)
    a = a;
  b = b;
  c = c;

  if(a == b) {
    a = a;
    b = b;
    c = c;
  }

  if(a > b) {
    if(b < c) {
      b = b;
    }
  }

  if(a > b) {
    b = b;
  }
  else {
    a = a;
  }

  if(a > b) {
    b = b;
  }
  else if(b < c) {
    c = c;
  }
  else {
    a = a;
  }

  if(a < b) {
    if(b > c) {
      if(c > d) {
        a = a;
      }
      else if(d < e) {
        b = b;
      }
      else {
        c = c;
      }
    }
  }

  if(a < b)
    if(b > c)
      if(c > d)
        a = a;
      else if(d < e)
        b = b;
 
  if(a < b)
    if(b > c)
      if(c > d)
        a = a;
      else if(d < e)
        b = b;
      else
        c = c;
}
//////////////////////////////////////////////////////////////////////////
void test_flow_while()
{
  int a = 0, b = 1, c = 2, d = 3, e = 4, f = 5;
  
  while(a<10);  
  
  while(a<100)
   a++;
   
  while(b<10)
  {
    b++;
  }
  
  while(c < 20)
  {
    while(d < 30)
	{
	  d++;
	}
	c++;
  }
  
  while(e<40)
    while(f<50)
	{
	  e++;
	  f++;
	}
  
  while(a < 11)
	while(b < 12)
	  while(c < 13)
	    while(d < 14) {
		  a++;
		  b++;
		  c++;
		  d++;
		}
}
//////////////////////////////////////////////////////////////////////////
void test_flow_dowhile()
{
  int a = 0, b = 1, c = 2, d = 3, e = 4, f = 5;
  do {
  }while(a<b);

  do {
    a++;
  }while(a<b);
  
  do {
    do {
	  a++;
	  ++b;
    }while(b<c);
  }while(a<b);
}
//////////////////////////////////////////////////////////////////////////
void test_flow_mix()
{
  int a=0,b=1,c=2,d=3,e=4,f=5;
  for(int i = 0; i < 10; i++)
  {
    if(a > b) {
      while(b < 10) {
	    b++;
	  }
	}
	else if(c < d){
	  for(;;);
	}
	else {
	  do {
	    f++;
	  }while(f < 20);
	}
  }

  for(int i = 0; i < 10; i++)
    if(a > b)
      while(b < 10)
	    b++;
	else if(c < d)
	  for(;;);
	else
	  do {
	    f++;
	  }while(f < 20);
}
//////////////////////////////////////////////////////////////////////////
void test_arithmetic_expression()
{
  int a = 0, b = 1, c = 2, d = 3, e = 4, f = 5;
  a=b+=(c++)-d+(--e/-f);
  a=(b+c)*d+e+f;
}

float CalcC_1(float t, float p, float q)
{
  return t<(1.0/4.0) ? (p+((q-p)*4.0*t))
	: (t<0.5) ? q
	: (t<3.0/4.0) ? p+((q-p)*8.0*(3.0/4.0-t))
	: p;
}

float CalcC_2(float t, float p, float q)
{
  if(t<(1.0/4.0))
  {
    return p+((q-p)*4.0*t);
  }
  else if(t<0.5)
  {
    return q;
  }
  else if(t<3.0/4.0)
  {
    return p+((q-p)*4.0*(3.0/4.0-t));
  }
  else
  {
    return p;
  }
}