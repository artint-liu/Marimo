// https://www.shadertoy.com/view/4tBXDD
/* 
	Toying with code from :
	@paulofalcao -> https://www.shadertoy.com/view/ldfGzr
	IQ raymarch reference and noise -> https://www.shadertoy.com/view/Xds3zN 
	Shane's texture bump mapping -> https://www.shadertoy.com/view/MlXSWX
*/

const int ITER = 50;
const float PI = 3.14159265;

mat3 m = mat3( 0.00,  0.80,  0.60,
              -0.80,  0.36, -0.48,
              -0.60, -0.48,  0.64 );

mat2 m2 = mat2( 0.80,  0.60, -0.60,  0.9 );

mat3 rotate3(vec3 angles)
{
    vec3 c = cos(angles);
    vec3 s = sin(angles);
    
    mat3 rotX = mat3( 1.0, 0.0, 0.0, 0.0,c.x,s.x, 0.0,-s.x, c.x);
    mat3 rotY = mat3( c.y, 0.0,-s.y, 0.0,1.0,0.0, s.y, 0.0, c.y);
    mat3 rotZ = mat3( c.z, s.z, 0.0,-s.z,c.z,0.0, 0.0, 0.0, 1.0);

    return rotX * rotY * rotZ;
}

float ss(float mi,float ma,float a)
{ // sineSignal (min,max,alpha)
	return (sin(a)+1.)*(ma-mi)*0.5+mi;
}


//   /
//---  Noise
//   \


float noise( in vec2 x )
{
	vec2 p = floor(x);
	vec2 f = fract(x);
	vec2 uv = p.xy + f.xy*f.xy*(3.0-2.0*f.xy);
	return texture2D( iChannel0, (uv+118.4)/256.0, -100.0 ).x;
}

float noise( in vec3 x )
{
	vec3 p = floor(x);
	vec3 f = fract(x);
	f = f*f*(3.0-2.0*f);
	
	vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;
	vec2 rg = texture2D( iChannel0, (uv+ 0.5)/256.0, -100.0 ).yx;
	return mix( rg.x, rg.y, f.z );
}

float fbm( vec2 p )
{
	p*=3.;
	float f = 0.0;
    f += 0.25000*noise( p ); p = m2*p*0.02;
    f += 0.12500*noise( p ); p = m2*p*0.13;
    f += 0.06250*noise( p ); p = m2*p*0.01;
    f += 0.03125*noise( p ); p = m2*p*0.04;
    f += 0.01500*noise( p );
    return f/0.38375;
}

float fbm( vec3 p )
{
    float f;
    f = 0.5000*noise( p ); p = m*p*2.02;
    f += 0.2500*noise( p ); p = m*p*2.03;
    f += 0.1250*noise( p ); p = m*p*2.01;
    f += 0.0625*noise( p );
    return f;
}

//    /
//----  Objects / Primitives
//    \

float sdPlane( vec3 p )
{
	return p.y;
}

float sdSphere( vec3 p, float s )
{
    return length(p)-s;
}

float sdBox( vec3 p, vec3 b )
{
  vec3 d = abs(p) - b;
  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
}

float udRoundBox( vec3 p, vec3 b, float r )
{
  return length(max(abs(p)-b,0.0))-r;
}

float sdTorus( vec3 p, vec2 t )
{
  return length( vec2(length(p.xz)-t.x,p.y) )-t.y;
}

float sdHexPrism( vec3 p, vec2 h )
{
    vec3 q = abs(p);
#if 0
    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);
#else
    float d1 = q.z-h.y;
    float d2 = max((q.x*0.866025+q.y*0.5),q.y)-h.x;
    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);
#endif
}

float sdCapsule( vec3 p, vec3 a, vec3 b, float r )
{
	vec3 pa = p-a, ba = b-a;
	float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
	return length( pa - ba*h ) - r;
}

float sdTriPrism( vec3 p, vec2 h )
{
    vec3 q = abs(p);
#if 0
    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);
#else
    float d1 = q.z-h.y;
    float d2 = max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5;
    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);
#endif
}

float sdCylinder( vec3 p, vec2 h )
{
  vec2 d = abs(vec2(length(p.xz),p.y)) - h;
  return min(max(d.x,d.y),0.0) + length(max(d,0.0));
}

float sdCone( in vec3 p, in vec3 c )
{
    vec2 q = vec2( length(p.xz), p.y );
#if 0
	return max( max( dot(q,c.xy), p.y), -p.y-c.z );
#else
    float d1 = -p.y-c.z;
    float d2 = max( dot(q,c.xy), p.y);
    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);
#endif    
}

float length2( vec2 p )
{
	return sqrt( p.x*p.x + p.y*p.y );
}

float length6( vec2 p )
{
	p = p*p*p; p = p*p;
	return pow( p.x + p.y, 1.0/6.0 );
}

float length8( vec2 p )
{
	p = p*p; p = p*p; p = p*p;
	return pow( p.x + p.y, 1.0/8.0 );
}

float sdTorus82( vec3 p, vec2 t )
{
  vec2 q = vec2(length2(p.xz)-t.x,p.y);
  return length8(q)-t.y;
}

float sdTorus88( vec3 p, vec2 t )
{
  vec2 q = vec2(length8(p.xz)-t.x,p.y);
  return length8(q)-t.y;
}

float sdCylinder6( vec3 p, vec2 h )
{
  return max( length6(p.xz)-h.x, abs(p.y)-h.y );
}


//    /
//----  Operators
//    \

float opS( float d1, float d2 )
{
    return max(-d2,d1);
}

vec2 opU( vec2 d1, vec2 d2 )
{
	return (d1.x<d2.x) ? d1 : d2;
}

float opU( float d1, float d2 )
{
    return min(d1,d2);
}

float opI( float d1, float d2 )
{
    return max(d1,d2);
}

vec3 opRep( vec3 p, vec3 c )
{
    return mod(p,c)-0.5*c;
}

vec3 opTwist( vec3 p, float freq, float phase )
{
    float  c = cos(freq*p.y+phase);
    float  s = sin(freq*p.y+phase);
    mat2   m = mat2(c,-s,s,c);
    return vec3(m*p.xz,p.y);
}


//    /
// ---  Field
//    \

mat3 rotation;

float distanceField(in vec3 p) 
{
    vec2 res,res0,res1,res2;
	res = vec2(9999999.,0.);

    float fbmp=fbm(p);
        
  	p = opRep(p, vec3(10,10.,10.) );
    
    res1 = vec2(sdCapsule(p, vec3(0.,0.,-5.), vec3(0.,0.,5.),4.2 ), 000002.);
    res = opU(res,res1);
    res1 = vec2(sdCapsule(p, vec3(0.,-5.,0.), vec3(0.,5.,0.),4.2 ), 009900.);
    res = opU(res,res1);
    res1 = vec2(sdCapsule(p, vec3(-5.,0.,0.), vec3(5.,0.,0.),4.2 ), 999900.);
    res2 = opU(res,res1);
    
    res1 = vec2( sdBox(p,vec3(5.,5.,5.)),990000);
    res.x = opS(res1.x,res2.x);
    
    return res.x+fbmp*ss(0.,0.8,iGlobalTime/2.35);
}

//    /
// ---  Texturing
//    \

float getGrey(vec3 p){ return p.x*0.299 + p.y*0.587 + p.z*0.114; }

vec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){
  
    n = max((abs(n) - 0.2)*7., 0.001); // max(abs(n), 0.001), etc.
    n /= (n.x + n.y + n.z );  
    
	return (texture2D(tex, p.yz)*n.x + texture2D(tex, p.zx)*n.y + texture2D(tex, p.xy)*n.z).xyz;
}

// from Shane : https://www.shadertoy.com/view/MlXSWX
vec3 doBumpMap( sampler2D tex, in vec3 p, in vec3 nor, float bumpfactor){
   
    const float eps = 0.001;
    float ref = getGrey(tex3D(tex,  p , nor));                 
    vec3 grad = vec3( getGrey(tex3D(tex, vec3(p.x-eps, p.y, p.z), nor))-ref,
                      getGrey(tex3D(tex, vec3(p.x, p.y-eps, p.z), nor))-ref,
                      getGrey(tex3D(tex, vec3(p.x, p.y, p.z-eps), nor))-ref )/eps;
             
    grad -= nor*dot(nor, grad);          
                      
    return normalize( nor + grad*bumpfactor );
	
}

//    /
// ---  Main
//	  \

void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
  	vec3 bgColor = vec3 (0.1,0.0,0.0);

  	vec2 vPos=-1.0+2.0*fragCoord.xy/iResolution.xy;
  	vec3 finalColor = vec3 (0.0);  
  
  	//Camera animation
  	vec3 vuv=vec3(0,0,1);//Change camere up vector here
  	
    vec3 prp=vec3(
        	ss(-5.4,15.6,iGlobalTime/2.),
        	ss(-2.,2.,iGlobalTime),
        	4. ); //Change camera path position here
  	
        	//2.5 , 2., 2.5 );
        	
    vec3 vrp=vec3(
        2.5,
        2.5,
        //ss(0.,8.,iGlobalTime) ); //Change camere view here
        2.5);

  	//Camera setup
  	vec3 vpn=normalize(vrp-prp);
  	vec3 u=normalize(cross(vuv,vpn)*rotate3(vec3(ss(-0.3,0.3,iGlobalTime*0.63),0.,0.) ));
  	vec3 v=cross(vpn,u);
  	vec3 vcv=(prp+vpn);
  	vec3 scrCoord=vcv+vPos.x*u*iResolution.x/iResolution.y+vPos.y*v;
  	vec3 scp=normalize(scrCoord-prp);

  	//Raymarching
  	const vec3 e=vec3(0.2,0,0);
  	const float maxd=50.0; //Max depth

  	float s= 0.1;
  	vec3 c,p,n;

  	float f=1.0;
  	for(int i=0;i<  ITER ; i++)
    {
    	if (abs(s)<.01||f>maxd) break;
    	f+=s;
    	p=prp+scp*f;
    	s=distanceField(p);
  	}

  	if (f<maxd)
    {
    	
    	n=normalize(
      	vec3(s-distanceField(p-e.xyy),
        	s-distanceField(p-e.yxy),
        	s-distanceField(p-e.yyx)));
    	
        float texScale = 0.5;
        n = doBumpMap(iChannel1, p*texScale, n,  0.40);
        
        float b=dot(n,normalize(prp-p));
		
        c=tex3D(iChannel1, p*texScale, n)*4.;
    	
        vec3 lightPos = vec3( 2.5,2.5,sin(iGlobalTime*1.1)*4. );
        vec3 lightDir = normalize(lightPos-p);
        float lightDistance = distance(lightPos,p);
        
        float b2=dot(lightDir,n);
        
        vec3 c1 = vec3( b*c+pow(b,8.) ) ;
        vec3 c2 = vec3( c*(b2 + pow(b2, 8.) + 0.35)*1.5/(1.+lightDistance*.1+lightDistance*lightDistance*.005));  // Shane suggestion
        
        
        finalColor = mix(c1,c2,.6);
		finalColor*=0.44;
    
    	// vignetting from : https://www.shadertoy.com/view/4lSXDm
    	vec2 uv = fragCoord.xy / iResolution.xy;
    	vec2 coord = (uv - 0.5) * (iResolution.x/iResolution.y) * 2.0;
    	float Falloff = 0.35;
        float rf = sqrt(dot(coord, coord)) * Falloff;
	    float rf2_1 = rf * rf + 1.0;
	    float e = 1.0 / (rf2_1 * rf2_1);
    
	    vec4 src = vec4(finalColor,1.);
		fragColor = vec4(src.rgb * e, 1.0);    
    	//fragColor = vec4( finalColor, 1.);
  	} else 
    { // background color
    	bgColor = 
	  		vec3(0.1,0.1,0.1)*0.4;
	  	fragColor=vec4(bgColor,1.);
  	}
}