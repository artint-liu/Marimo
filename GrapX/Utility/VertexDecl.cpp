// 全局头文件
#include <GrapX.H>

// 标准接口
//#include <GrapX/GUnknown.H>
#include <GrapX/GResource.H>
#include <GrapX/GShader.H>

#include "GrapX/VertexDecl.H"

//D3DVERTEXELEMENT9 POS_TEXCOORD_COLOR_ELEMENT[] =
//{
//  { 0,  0, D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
//  { 0, 12, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 0 },
//  { 0, 20, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR,    0 },
//  D3DDECL_END()
//};
//
//D3DVERTEXELEMENT9 POST_TEXCOORD_COLOR_ELEMENT[] =
//{
//  { 0,  0, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
//  { 0, 16, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 0 },
//  { 0, 24, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR,    0 },
//  D3DDECL_END()
//};
STATIC_ASSERT(sizeof(POS_TEXCOORD_COLOR) == sizeof(float) * 9);
//STATIC_ASSERT(sizeof(POST_TEXCOORD_COLOR) == sizeof(float) * 10);

GXVERTEXELEMENT GXVERTDECL_P3F_C1D[] =
{
  {  0, GXDECLTYPE_FLOAT3, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_POSITION, 0 },
  { 12, GXDECLTYPE_D3DCOLOR, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_COLOR,  0 },
  GXDECL_END()
};

GXVERTEXELEMENT GXVERTDECL_P3T2C4F[] =
{
  {  0, GXDECLTYPE_FLOAT3, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_POSITION, 0 },
  { 12, GXDECLTYPE_FLOAT2, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_TEXCOORD, 0 },
  { 20, GXDECLTYPE_FLOAT4, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_COLOR,    0 },
  GXDECL_END()
};

GXVERTEXELEMENT GXVERTDECL_P3T2N3F[] =
{
  {  0, GXDECLTYPE_FLOAT3, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_POSITION, 0 },
  { 12, GXDECLTYPE_FLOAT2, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_TEXCOORD, 0 },
  { 20, GXDECLTYPE_FLOAT3, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_NORMAL,   0 },
  GXDECL_END()
};

GXVERTEXELEMENT GXVERTDECL_P4T2C4F[] =
{
  {  0, GXDECLTYPE_FLOAT4, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_POSITION, 0 },
  { 16, GXDECLTYPE_FLOAT2, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_TEXCOORD, 0 },
  { 24, GXDECLTYPE_FLOAT4, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_COLOR,    0 },
  GXDECL_END()
};

GXVERTEXELEMENT GXVERTDECL_P3T2F_C1D[] =
{
  {  0, GXDECLTYPE_FLOAT3, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_POSITION, 0 },
  { 12, GXDECLTYPE_FLOAT2, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_TEXCOORD, 0 },
  { 20, GXDECLTYPE_D3DCOLOR, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_COLOR,  0 },
  GXDECL_END()
};

GXVERTEXELEMENT GXVERTDECL_P4T2F_C1D[] =
{
  {  0, GXDECLTYPE_FLOAT4, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_POSITION, 0 },
  { 16, GXDECLTYPE_FLOAT2, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_TEXCOORD, 0 },
  { 24, GXDECLTYPE_D3DCOLOR, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_COLOR,  0 },
  GXDECL_END()
};

GXVERTEXELEMENT GXVERTDECL_P3T2N3F_C1D[] =
{
  {  0, GXDECLTYPE_FLOAT3, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_POSITION, 0 },
  { 12, GXDECLTYPE_FLOAT2, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_TEXCOORD, 0 },
  { 20, GXDECLTYPE_FLOAT3, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_NORMAL,   0 },
  { 32, GXDECLTYPE_D3DCOLOR, GXDECLMETHOD_DEFAULT, GXDECLUSAGE_COLOR,  0 },
  GXDECL_END()
};
GXLPCVERTEXELEMENT GXDLLAPI MOGetSysVertexDecl(GXSysVertexDecl eDecl)
{
  switch(eDecl)
  {
  case GXVD_P3F_C1D:
    return GXVERTDECL_P3F_C1D;
  case GXVD_P3T2C4F:
    return GXVERTDECL_P3T2C4F;
  case GXVD_P4T2C4F:
    return GXVERTDECL_P4T2C4F;
  case GXVD_P3T2N3F:
    return GXVERTDECL_P3T2N3F;
  case GXVD_P3T2F_C1D:
    return GXVERTDECL_P3T2F_C1D;
  case GXVD_P4T2F_C1D:
    return GXVERTDECL_P4T2F_C1D;
  case GXVD_P3T2N3F_C1D:
    return GXVERTDECL_P3T2N3F_C1D;
  }
  return NULL;
}

extern "C" void GXDLL MOVIndex16To32(const VIndex* pIndices16, int nIndexCount, VIndex32* pIndices32)
{
  for(int i = 0; i < nIndexCount; i++) {
    pIndices32[i] = pIndices16[i];
  }
}

extern "C" int GXDLL MOVIndex32To16(const VIndex32* pIndices32, int nIndexCount, VIndex* pIndices16)
{
  int i = 0;
  for(; i < nIndexCount; i++) {
    if(pIndices32[i] > (VIndex32)0xffff)
      return i;
    pIndices16[i] = pIndices32[i];
  }
  return i;
}
