// 全局头文件
#include <GrapX.H>

// 标准接口

// 私有头文件

// 这段儿以后可能不要了
//static 
//  BEGIN_RENDERSTATE_BLOCK(s_TextRSEx)
//  RENDERSTATE_BLOCK(GXRS_SEPARATEALPHABLENDENABLE, TRUE)
//  RENDERSTATE_BLOCK(GXRS_SRCBLENDALPHA, GXBLEND_INVDESTALPHA)
//  RENDERSTATE_BLOCK(GXRS_DESTBLENDALPHA, GXBLEND_DESTALPHA)
//  END_RENDERSTATE_BLOCK
//
//static
//  BEGIN_RENDERSTATE_BLOCK(s_NormalRSEx)
//  RENDERSTATE_BLOCK(GXRS_ALPHABLENDENABLE, TRUE)
//  RENDERSTATE_BLOCK(GXRS_SRCBLEND, GXBLEND_SRCALPHA)
//  RENDERSTATE_BLOCK(GXRS_DESTBLEND, GXBLEND_INVSRCALPHA)
//  RENDERSTATE_BLOCK(GXRS_SEPARATEALPHABLENDENABLE, FALSE)
//  END_RENDERSTATE_BLOCK
//
//static
//  BEGIN_RENDERSTATE_BLOCK(s_FTTextRSEx)
//  RENDERSTATE_BLOCK(GXRS_ALPHABLENDENABLE, TRUE)
//  RENDERSTATE_BLOCK(GXRS_SRCBLEND, GXBLEND_SRCALPHA)
//  RENDERSTATE_BLOCK(GXRS_DESTBLEND, GXBLEND_INVSRCALPHA)
//  RENDERSTATE_BLOCK(GXRS_SEPARATEALPHABLENDENABLE, TRUE)
//  RENDERSTATE_BLOCK(GXRS_SRCBLENDALPHA, GXBLEND_ONE)
//  RENDERSTATE_BLOCK(GXRS_DESTBLENDALPHA, GXBLEND_ONE)
//  END_RENDERSTATE_BLOCK
//
//static
//BEGIN_RENDERSTATE_BLOCK(s_InvertRS)
//  RENDERSTATE_BLOCK(GXRS_SRCBLEND                , GXBLEND_INVDESTCOLOR)
//  RENDERSTATE_BLOCK(GXRS_DESTBLEND               , GXBLEND_ZERO)
//  RENDERSTATE_BLOCK(GXRS_SEPARATEALPHABLENDENABLE, TRUE)
//  RENDERSTATE_BLOCK(GXRS_SRCBLENDALPHA           , GXBLEND_ZERO)
//  RENDERSTATE_BLOCK(GXRS_DESTBLENDALPHA          , GXBLEND_ONE)
//  END_RENDERSTATE_BLOCK
//
//BEGIN_RENDERSTATE_BLOCK(s_AlphaFinalBlend)
//  RENDERSTATE_BLOCK(GXRS_ALPHABLENDENABLE, TRUE)
//  RENDERSTATE_BLOCK(GXRS_SEPARATEALPHABLENDENABLE, FALSE)
//
//  RENDERSTATE_BLOCK(GXRS_BLENDOP, GXBLENDOP_ADD)
//  RENDERSTATE_BLOCK(GXRS_SRCBLEND, GXBLEND_SRCALPHA)
//  RENDERSTATE_BLOCK(GXRS_DESTBLEND, GXBLEND_INVSRCALPHA)
//END_RENDERSTATE_BLOCK        
//
//BEGIN_RENDERSTATE_BLOCK(s_OpaqueFinalBlend)
//  RENDERSTATE_BLOCK(GXRS_ALPHABLENDENABLE, FALSE)
//  RENDERSTATE_BLOCK(GXRS_SEPARATEALPHABLENDENABLE, FALSE)
//END_RENDERSTATE_BLOCK
//
//BEGIN_RENDERSTATE_BLOCK(s_AlphaPreBlend)
//  RENDERSTATE_BLOCK(GXRS_ALPHABLENDENABLE, TRUE)
//  RENDERSTATE_BLOCK(GXRS_SEPARATEALPHABLENDENABLE, TRUE)
//
//  RENDERSTATE_BLOCK(GXRS_BLENDOP, GXBLENDOP_ADD)
//  RENDERSTATE_BLOCK(GXRS_SRCBLEND, GXBLEND_SRCALPHA)
//  RENDERSTATE_BLOCK(GXRS_DESTBLEND, GXBLEND_INVSRCALPHA)
//
//  RENDERSTATE_BLOCK(GXRS_BLENDOPALPHA, GXBLENDOP_ADD)
//  RENDERSTATE_BLOCK(GXRS_SRCBLENDALPHA, GXBLEND_INVDESTALPHA)
//  RENDERSTATE_BLOCK(GXRS_DESTBLENDALPHA, GXBLEND_ONE)
//END_RENDERSTATE_BLOCK
//
//BEGIN_RENDERSTATE_BLOCK(s_OpaquePreBlend)
//  RENDERSTATE_BLOCK(GXRS_ALPHABLENDENABLE, TRUE)
//  RENDERSTATE_BLOCK(GXRS_SEPARATEALPHABLENDENABLE, FALSE)
//
//  RENDERSTATE_BLOCK(GXRS_BLENDOP, GXBLENDOP_ADD)
//  RENDERSTATE_BLOCK(GXRS_SRCBLEND, GXBLEND_ONE)
//  RENDERSTATE_BLOCK(GXRS_DESTBLEND, GXBLEND_ZERO)
//END_RENDERSTATE_BLOCK

// 原型设计备份
//BEGIN_RENDERSTATE_BLOCK(s_AlphaFinalBlend)
//  RENDERSTATE_BLOCK(GXRS_ALPHABLENDENABLE, TRUE)
//  RENDERSTATE_BLOCK(GXRS_SEPARATEALPHABLENDENABLE, FALSE)
//
//  RENDERSTATE_BLOCK(GXRS_BLENDOP, GXBLENDOP_ADD)
//  RENDERSTATE_BLOCK(GXRS_SRCBLEND, GXBLEND_SRCALPHA)
//  RENDERSTATE_BLOCK(GXRS_DESTBLEND, GXBLEND_INVSRCALPHA)
//END_RENDERSTATE_BLOCK        
//
//BEGIN_RENDERSTATE_BLOCK(s_OpaqueFinalBlend)
//  RENDERSTATE_BLOCK(GXRS_ALPHABLENDENABLE, FALSE)
//  RENDERSTATE_BLOCK(GXRS_SEPARATEALPHABLENDENABLE, FALSE)
//END_RENDERSTATE_BLOCK
//
//BEGIN_RENDERSTATE_BLOCK(s_AlphaPreBlend)
//  RENDERSTATE_BLOCK(GXRS_ALPHABLENDENABLE, TRUE)
//  RENDERSTATE_BLOCK(GXRS_SEPARATEALPHABLENDENABLE, TRUE)
//
//  RENDERSTATE_BLOCK(GXRS_BLENDOP, GXBLENDOP_ADD)
//  RENDERSTATE_BLOCK(GXRS_SRCBLEND, GXBLEND_SRCALPHA)
//  RENDERSTATE_BLOCK(GXRS_DESTBLEND, GXBLEND_INVSRCALPHA)
//
//  RENDERSTATE_BLOCK(GXRS_BLENDOPALPHA, GXBLENDOP_ADD)
//  RENDERSTATE_BLOCK(GXRS_SRCBLENDALPHA, GXBLEND_INVDESTALPHA)
//  RENDERSTATE_BLOCK(GXRS_DESTBLENDALPHA, GXBLEND_ONE)
//END_RENDERSTATE_BLOCK
//
//BEGIN_RENDERSTATE_BLOCK(s_OpaquePreBlend)
//  RENDERSTATE_BLOCK(GXRS_ALPHABLENDENABLE, TRUE)
//  RENDERSTATE_BLOCK(GXRS_SEPARATEALPHABLENDENABLE, TRUE)
//
//  RENDERSTATE_BLOCK(GXRS_BLENDOP, GXBLENDOP_ADD)
//  RENDERSTATE_BLOCK(GXRS_SRCBLEND, GXBLEND_SRCALPHA)
//  RENDERSTATE_BLOCK(GXRS_DESTBLEND, GXBLEND_ZERO)
//
//  RENDERSTATE_BLOCK(GXRS_BLENDOPALPHA, GXBLENDOP_ADD)
//  RENDERSTATE_BLOCK(GXRS_SRCBLENDALPHA, GXBLEND_ONE)
//  RENDERSTATE_BLOCK(GXRS_DESTBLENDALPHA, GXBLEND_ZERO)
//END_RENDERSTATE_BLOCK